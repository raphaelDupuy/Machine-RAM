Terminals unused in grammar

    VIRG
    NUMB


Grammar

    0 $accept: contenu $end

    1 contenu: input FDL programme

    2 input: INSTRUCTION

    3 programme: INSTRUCTION
    4          | programme FDL programme
    5          | FDL programme
    6          | $end


Terminals, with rules where they appear

    $end (0) 0 6
    error (256)
    INSTRUCTION <lettre> (258) 2 3
    FDL (259) 1 4 5
    VIRG (260)
    NUMB <lettre> (261)


Nonterminals, with rules where they appear

    $accept (7)
        on left: 0
    contenu (8)
        on left: 1
        on right: 0
    input <lettre> (9)
        on left: 2
        on right: 1
    programme <lettre> (10)
        on left: 3 4 5 6
        on right: 1 4 5


State 0

    0 $accept: • contenu $end
    1 contenu: • input FDL programme
    2 input: • INSTRUCTION

    INSTRUCTION  shift, and go to state 1

    contenu  go to state 2
    input    go to state 3


State 1

    2 input: INSTRUCTION •

    $default  reduce using rule 2 (input)


State 2

    0 $accept: contenu • $end

    $end  shift, and go to state 4


State 3

    1 contenu: input • FDL programme

    FDL  shift, and go to state 5


State 4

    0 $accept: contenu $end •

    $default  accept


State 5

    1 contenu: input FDL • programme
    3 programme: • INSTRUCTION
    4          | • programme FDL programme
    5          | • FDL programme
    6          | • $end

    $end         shift, and go to state 6
    INSTRUCTION  shift, and go to state 7
    FDL          shift, and go to state 8

    programme  go to state 9


State 6

    6 programme: $end •

    $default  reduce using rule 6 (programme)


State 7

    3 programme: INSTRUCTION •

    $default  reduce using rule 3 (programme)


State 8

    3 programme: • INSTRUCTION
    4          | • programme FDL programme
    5          | • FDL programme
    5          | FDL • programme
    6          | • $end

    $end         shift, and go to state 6
    INSTRUCTION  shift, and go to state 7
    FDL          shift, and go to state 8

    programme  go to state 10


State 9

    1 contenu: input FDL programme •  [$end]
    4 programme: programme • FDL programme

    FDL  shift, and go to state 11

    $default  reduce using rule 1 (contenu)


State 10

    4 programme: programme • FDL programme
    5          | FDL programme •  [$end, FDL]

    $default  reduce using rule 5 (programme)

    Conflict between rule 5 and token FDL resolved as reduce (%left FDL).


State 11

    3 programme: • INSTRUCTION
    4          | • programme FDL programme
    4          | programme FDL • programme
    5          | • FDL programme
    6          | • $end

    $end         shift, and go to state 6
    INSTRUCTION  shift, and go to state 7
    FDL          shift, and go to state 8

    programme  go to state 12


State 12

    4 programme: programme • FDL programme
    4          | programme FDL programme •  [$end, FDL]

    $default  reduce using rule 4 (programme)

    Conflict between rule 4 and token FDL resolved as reduce (%left FDL).
